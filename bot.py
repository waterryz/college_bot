from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from db import save_credentials, get_credentials
from parser import get_grades
import asyncio
import logging
import os

BOT_TOKEN = os.getenv("BOT_TOKEN")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())
logging.basicConfig(level=logging.INFO)

class Form(StatesGroup):
    login = State()
    password = State()

@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–≤–æ–∏ –æ—Ü–µ–Ω–∫–∏.\n\n"
                         "üëã –°”ô–ª–µ–º! –ú–µ–Ω —Å–µ–Ω—ñ“£ –±–∞“ì–∞–ª–∞—Ä—ã“£–¥—ã –∫”©—Ä—Å–µ—Ç–µ–º—ñ–Ω.\n\n"
                         "üÜî –í–≤–µ–¥–∏ —Å–≤–æ–π *–ñ–°–ù (–ò–ò–ù)* –Ω–æ–º–µ—Ä:\n"
                         "üÜî ”®–∑—ñ–Ω—ñ“£ *–ñ–°–ù (–ò–ò–ù)* –Ω”©–º—ñ—Ä—ñ“£–¥—ñ –µ–Ω–≥—ñ–∑:")
    await state.set_state(Form.login)

@dp.message(Form.login)
async def process_login(message: types.Message, state: FSMContext):
    await state.update_data(login=message.text)
    await message.answer("üîí –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π *–ø–∞—Ä–æ–ª—å*:\n"
                         "üîí –ï–Ω–¥—ñ ”©–∑—ñ“£–Ω—ñ“£ *“õ“±–ø–∏—è —Å”©–∑—ñ“£–¥—ñ* –µ–Ω–≥—ñ–∑:")
    await state.set_state(Form.password)

@dp.message(Form.password)
async def process_password(message: types.Message, state: FSMContext):
    data = await state.get_data()
    login = data["login"]
    password = message.text

    save_credentials(message.from_user.id, login, password)
    await state.clear()
    await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å /grades —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–∏ –æ—Ü–µ–Ω–∫–∏.\n"
                         "‚úÖ –ú”ô–ª—ñ–º–µ—Ç—Ç–µ—Ä —Å–∞“õ—Ç–∞–ª–¥—ã! –ï–Ω–¥—ñ /grades –¥–µ–ø –∂–∞–∑ ‚Äî –±–∞“ì–∞–ª–∞—Ä—ã“£–¥—ã –∫”©—Ä—É “Ø—à—ñ–Ω.")

@dp.message(Command("grades"))
async def get_user_grades(message: types.Message):
    login, password = get_credentials(message.from_user.id)
    if not login or not password:
        await message.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏ —Å–≤–æ–π –ò–ò–ù –∏ –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ /start.")
        return

    await message.answer("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Ç–≤–æ–∏ –æ—Ü–µ–Ω–∫–∏...\n‚è≥ –ë–∞“ì–∞–ª–∞—Ä—ã“£—ã–∑ –∂“Ø–∫—Ç–µ–ª—É–¥–µ...")
    result = get_grades(login, password)
    await message.answer(result, parse_mode="Markdown")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
