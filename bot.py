import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from parser import get_grades
from db import init_db, save_credentials, get_credentials
import os

BOT_TOKEN = os.getenv("BOT_TOKEN")

if not BOT_TOKEN:
    raise ValueError("‚ùå –£–∫–∞–∂–∏ BOT_TOKEN –≤ Render Environment Variables!")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()


@dp.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer(
        "üëã –°”ô–ª–µ–º! / –ü—Ä–∏–≤–µ—Ç!\n\n"
        "–ë“±–ª –±–æ—Ç Snation College —Å–∞–π—Ç—ã–Ω–¥–∞“ì—ã –∂—É—Ä–Ω–∞–ª–¥–∞–Ω –±–∞“ì–∞–ª–∞—Ä–¥—ã –∫”©—Ä—Å–µ—Ç–µ–¥—ñ.\n"
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –ò–ò–ù –∏ –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n\n"
        "_–ü—Ä–∏–º–µ—Ä:_ `123456789012 12345678`",
        parse_mode="Markdown"
    )


@dp.message()
async def handle_login(message: types.Message):
    """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞: –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ò–ò–ù –∏ –ø–∞—Ä–æ–ª—å, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç, –ø–∞—Ä—Å–∏—Ç –æ—Ü–µ–Ω–∫–∏"""
    try:
        parts = message.text.strip().split()
        if len(parts) != 2:
            await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏ –ò–ò–ù –∏ –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n–ü—Ä–∏–º–µ—Ä: `123456789012 12345678`", parse_mode="Markdown")
            return

        iin, password = parts
        user_id = message.from_user.id

        await message.answer("üîÑ “ö–æ—Å—ã–ª—É–¥–∞... / –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ —Å–∞–π—Ç—É SmartNation...")

        result = get_grades(iin, password)

        if "‚ùå" in result or "‚ö†Ô∏è" in result:
            await message.answer(result)
            return

        save_credentials(user_id, iin, password)
        await message.answer(result, parse_mode="Markdown")

    except Exception as e:
        await message.answer(f"‚ö†Ô∏è “ö–∞—Ç–µ –æ—Ä—ã–Ω –∞–ª–¥—ã / –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


async def main():
    print("ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω (polling mode)...")
    init_db()
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
