from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart, Command
import json, os
from parser import get_grades

bot = Bot(token=os.getenv("BOT_TOKEN"))
dp = Dispatcher()

USERS_FILE = "users.json"

def load_users():
    if os.path.exists(USERS_FILE):
        with open(USERS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_users(users):
    with open(USERS_FILE, "w", encoding="utf-8") as f:
        json.dump(users, f, ensure_ascii=False, indent=2)

from aiogram import Router, types
from parser import get_grades_from_html

router = Router()

@router.message(commands=["grades"])
async def send_grades(message: types.Message):
    with open("–ñ—É—Ä–Ω–∞–ª.html", "r", encoding="utf-8") as f:
        html_content = f.read()

    result = get_grades_from_html(html_content)
    await message.answer(result, parse_mode="Markdown")


@dp.message(CommandStart())
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç üëã\n–û—Ç–ø—Ä–∞–≤—å –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n–ü—Ä–∏–º–µ—Ä:\n`ivan123 mypassword`", parse_mode="Markdown")

@dp.message(F.text)
async def save_credentials(message: types.Message):
    users = load_users()
    parts = message.text.strip().split()
    if len(parts) != 2:
        await message.answer("–§–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–µ–Ω. –û—Ç–ø—Ä–∞–≤—å –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")
        return
    login, password = parts
    users[str(message.from_user.id)] = {"login": login, "password": password}
    save_users(users)
    await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ /grades —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ—Ü–µ–Ω–∫–∏.")

@dp.message(Command("grades"))
async def grades(message: types.Message):
    users = load_users()
    if str(message.from_user.id) not in users:
        await message.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å (—Å–º. /start).")
        return
    creds = users[str(message.from_user.id)]
    result = get_grades(creds["login"], creds["password"])

    if "error" in result:
        await message.answer(f"‚ùå {result['error']}")
        return

    text = "üìö *–¢–≤–æ–∏ –æ—Ü–µ–Ω–∫–∏:*\n\n" + "\n".join([f"‚Ä¢ {s}: {g}" for s, g in result["grades"]])
    await message.answer(text, parse_mode="Markdown")
