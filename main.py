from aiogram import Bot, Dispatcher, types, Router
from aiogram.filters import Command
from aiogram.types import Message
from db import init_db, save_credentials, get_credentials
from parser import get_grades

router = Router()
pending_login = {}
pending_password = {}

@router.message(Command("start"))
async def start_handler(message: Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–≤–æ–∏ –æ—Ü–µ–Ω–∫–∏.\n"
        "üëã –°”ô–ª–µ–º! –ú–µ–Ω —Å–µ–Ω—ñ“£ –±–∞“ì–∞–ª–∞—Ä—ã“£–¥—ã –∫”©—Ä—Å–µ—Ç–µ–º—ñ–Ω.\n\n"
        "üÜî –í–≤–µ–¥–∏ —Å–≤–æ–π *–ñ–°–ù (–ò–ò–ù)* –Ω–æ–º–µ—Ä:\n"
        "üÜî ”®–∑—ñ–Ω—ñ“£ *–ñ–°–ù (–ò–ò–ù)* –Ω”©–º—ñ—Ä—ñ“£–¥—ñ –µ–Ω–≥—ñ–∑:"
    )
    pending_login[message.from_user.id] = True

@router.message(lambda m: pending_login.get(m.from_user.id))
async def handle_login(message: Message):
    user_id = message.from_user.id
    pending_login.pop(user_id, None)
    pending_password[user_id] = message.text.strip()
    await message.answer(
        "üîí –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π *–ø–∞—Ä–æ–ª—å*:\n"
        "üîí –ï–Ω–¥—ñ ”©–∑—ñ“£–Ω—ñ“£ *“õ“±–ø–∏—è —Å”©–∑—ñ“£–¥—ñ* –µ–Ω–≥—ñ–∑:"
    )

@router.message(lambda m: pending_password.get(m.from_user.id))
async def handle_password(message: Message):
    user_id = message.from_user.id
    login = pending_password.pop(user_id)
    password = message.text.strip()

    save_credentials(user_id, login, password)
    await message.answer(
        "‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å /grades —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–∏ –æ—Ü–µ–Ω–∫–∏.\n"
        "‚úÖ –ú”ô–ª—ñ–º–µ—Ç—Ç–µ—Ä —Å–∞“õ—Ç–∞–ª–¥—ã! –ï–Ω–¥—ñ /grades –¥–µ–ø –∂–∞–∑ ‚Äî –±–∞“ì–∞–ª–∞—Ä—ã“£–¥—ã –∫”©—Ä—É “Ø—à—ñ–Ω."
    )

@router.message(Command("grades"))
async def grades_handler(message: Message):
    login, password = get_credentials(message.from_user.id)
    if not login:
        await message.answer(
            "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏ –ñ–°–ù –∏ –ø–∞—Ä–æ–ª—å –∫–æ–º–∞–Ω–¥–æ–π /start.\n"
            "‚ö†Ô∏è –ê–ª–¥—ã–º–µ–Ω /start –∞—Ä“õ—ã–ª—ã –ñ–°–ù –∂”ô–Ω–µ “õ“±–ø–∏—è —Å”©–∑ –µ–Ω–≥—ñ–∑."
        )
        return

    await message.answer(
        "‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Ç–≤–æ–∏ –æ—Ü–µ–Ω–∫–∏...\n"
        "‚è≥ –ë–∞“ì–∞–ª–∞—Ä—ã“£—ã–∑ –∂“Ø–∫—Ç–µ–ª—É–¥–µ..."
    )
    result = get_grades(login, password)
    await message.answer(result, parse_mode="Markdown")
